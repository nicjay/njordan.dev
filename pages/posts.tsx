import fs from 'fs';
import { serialize } from 'next-mdx-remote/serialize';
import path from 'path';
import PostItem from '../components/PostItem';
import { ListPost } from '../types/post';
import { postFilePaths, POSTS_PATH } from '../utils/mdxUtils';

export default function PostsPage({ posts }: { posts: ListPost[] }) {
  return (
    <div>
      <h1 className="text-3xl">My Posts</h1>
      <p className="py-4">
        Click the link below to navigate to a page generated by <code>next-mdx-remote</code>.
      </p>
      <div className="grid grid-cols-3 gap-4">
        {posts.map((post: ListPost) => (
          <PostItem key={post.slug} post={post} />
        ))}
      </div>
    </div>
  );
}

export async function getStaticProps() {
  const posts = await Promise.all(
    postFilePaths.map(async (filePath) => {
      const source = fs.readFileSync(path.join(POSTS_PATH, filePath), 'utf8');

      const mdxSource = await serialize(source, {
        mdxOptions: {
          remarkPlugins: [],
          rehypePlugins: []
        },
        parseFrontmatter: true
      });

      const post: ListPost = {
        slug: filePath.replace(/\.mdx?$/, ''),
        title: mdxSource.frontmatter?.title ?? '',
        description: mdxSource.frontmatter?.description ?? '',
        publishDate: new Date(mdxSource.frontmatter?.date ?? 0).toLocaleDateString('default', {
          month: 'long',
          year: 'numeric',
          day: 'numeric'
        }),
        coverImage: mdxSource.frontmatter?.image ?? ''
      };

      return post;
    })
  );

  // Sort newest posts first
  posts.sort((a, b) => {
    return new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime();
  });

  return { props: { posts } };
}
