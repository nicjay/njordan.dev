import fs from 'fs';
import { serialize } from 'next-mdx-remote/serialize';
import Image from 'next/future/image';
import Link from 'next/link';
import path from 'path';
import { ListPost } from '../types/post';
import { postFilePaths, POSTS_PATH } from '../utils/mdxUtils';

export default function PostsPage({ posts }: { posts: ListPost[] }) {
  return (
    <div>
      <h1 className="text-3xl">My Posts</h1>
      <p className="p-4">
        Click the link below to navigate to a page generated by{' '}
        <code>next-mdx-remote</code>.
      </p>
      <div className="flex flex-wrap gap-8">
        {posts.map((post: ListPost) => (
          <Link
            key={post.slug}
            as={`/posts/${post.slug}`}
            href={`/posts/[slug]`}
          >
            <a className="group relative h-72 w-1/3">
              <Image
                src={post.image}
                alt={post.title}
                fill
                sizes="20vw"
                quality={50}
                className="rounded-lg object-cover brightness-90 transition group-hover:brightness-50"
                priority
              />
              <div className="absolute p-4 text-white">
                <div className="text-4xl ">{post.title}</div>
                <div className="pt-4 opacity-0 transition group-hover:-translate-y-2 group-hover:opacity-100">
                  {post.description}
                </div>
              </div>
            </a>
          </Link>
        ))}
      </div>
    </div>
  );
}

export async function getStaticProps() {
  const posts = await Promise.all(
    postFilePaths.map(async (filePath) => {
      const source = fs.readFileSync(path.join(POSTS_PATH, filePath), 'utf8');

      const mdxSource = await serialize(source, {
        mdxOptions: {
          remarkPlugins: [],
          rehypePlugins: [],
        },
        parseFrontmatter: true,
      });

      const post: ListPost = {
        slug: filePath.replace(/\.mdx?$/, ''),
        title: mdxSource.frontmatter?.title ?? '',
        description: mdxSource.frontmatter?.description ?? '',
        date: mdxSource.frontmatter?.date ?? '',
        image: mdxSource.frontmatter?.image ?? '',
      };

      return post;
    })
  );

  return { props: { posts } };
}
